//运行配置
apply plugin: 'android'

description = """LuaView-Android-Demo: 用lua写Android、iOS"""

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    providedCompile
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //LuaViewSDK
    compile project(':LuaViewSDK')

    //glide for imageview
    compile 'com.github.bumptech.glide:glide:3.7.0'
}

/*
  定义android插件
*/
android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    buildTypes{
        debug{
            proguardFile("proguard.cfg")
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

